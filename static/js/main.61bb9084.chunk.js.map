{"version":3,"sources":["components/productList.js","serviceWorker.js","components/cart.js","api/api.js","components/login.js","components/login2.js","index.js","store/reducer.js"],"names":["ProductList","handleAddToCart","_this","props","myStore","dispatch","type","_this2","this","subscribe","forceUpdate","react_default","a","createElement","className","onClick","Component","Boolean","window","location","hostname","match","Cart","count","getState","id","_callee","implicit","getAuthorizationCodeImplicit","auth","regenerator_default","wrap","_context","prev","next","grant_type","url","redirect_uri","client_id","scope","state","redirect","oauth","client","axios","create","sent","console","log","abrupt","stop","login","Login","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleLogin","htmlString","setState","html","config","width","height","mapDispatchToProps","logout","connect","_ref2","isLoggedIn","_ref","store","createStore","action","configureStore","initialState","combineReducers","applyMiddleware","authMiddleware","ReactDOM","render","cart","document","getElementById","components_login2","components_login","productList","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.61bb9084.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nclass ProductList extends Component {\n  handleAddToCart = () => {\n    this.props.myStore.dispatch({\n        type: 'INCREMENT',\n      });\n  }\n  componentDidMount() {\n    this.props.myStore.subscribe(() => this.forceUpdate());\n  }\n\n  render() {\n\n    return (\n        <div>\n          <div className='ui unstackable items'>\n            Component Product List\n          </div>\n          <button onClick={this.handleAddToCart}>Add to Cart!</button>\n        </div>\n    );\n  }\n}\n\nProductList.propTypes = {\n  myStore: PropTypes.object,\n};\nexport default ProductList;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nclass Cart extends Component {\n  componentDidMount() {\n    this.props.myStore.subscribe(() => this.forceUpdate());\n  }\n\n  render () {\n    const count = this.props.myStore.getState();\n    return (\n      <div id=\"cart\">\n        {count} Items - Component Cart\n      </div>\n    );\n  }\n}\nCart.propTypes = {\n  myStore: PropTypes.object,\n};\nexport default Cart;","import axios from 'axios';\nimport oauth from 'axios-oauth-client';\n\nasync function login  () {\n  let url =\"http://35.246.165.105:9001/authorizationserver/oauth/authorize?grant_type=implicit&redirect_uri=http://35.246.165.105:9001/authorizationserver/oauth2_implicit_callback&client_id=client-side&scope=basic&state=$wCAVZ49kCOn.slStMc;Lva\";\n  let implicit = {\n    grant_type: 'implicit',\n    url: 'http://35.246.165.105:9001/authorizationserver/oauth/authorize',\n    redirect_uri: 'http://35.246.165.105:9001/authorizationserver/oauth2_implicit_callback',\n    client_id: 'client-side',\n    scope: 'basic',\n    state: '$wCAVZ49kCOn.slStMc;Lva',\n    redirect: 'follow',\n  }\n  const  getAuthorizationCodeImplicit =  oauth.client(axios.create(), implicit);\n  const auth =  await getAuthorizationCodeImplicit();\n  console.log(auth);\n  return auth;\n\n}\n\nasync function login2() {\n  let url =\"http://35.246.165.105:9001/authorizationserver/oauth/authorize?grant_type=implicit&redirect_uri=http://35.246.165.105:9001/authorizationserver/oauth2_implicit_callback&client_id=client-side&scope=basic&state=$wCAVZ49kCOn.slStMc;Lva\";\n  var ClientOAuth2 = require('client-oauth2')\n\n  var githubAuth = new ClientOAuth2({\n    clientId: 'client-side',\n    authorizationUri: 'http://35.246.165.105:9001/authorizationserver/oauth/authorize',\n    redirectUri: 'http://35.246.165.105:9001/authorizationserver/oauth2_implicit_callback',\n    scopes: ['basic'],\n    state: '$R.slStMc;Lvuuuu',\n  });\n}\n\nexport default login;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport login from '../api/api';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {html: ''};\n  }\n\n  handleLogin = () => {\n    let htmlString = login();\n    this.setState((state) => {\n      return {html: htmlString}\n    });\n\n  }\n\n  render () {\n    return (\n      <div id=\"login\">\n        <button onClick={this.handleLogin}>Login with Request</button>\n        <div id=\"login-form\">\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Login;","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { authMiddleware, authReducer as auth, login, logout } from 'redux-implicit-oauth2'\nimport { applyMiddleware, combineReducers, createStore } from 'redux'\n\nconst config = {\n  url: \"http://35.246.165.105:9001/authorizationserver/oauth/authorize\",\n  client: \"client-side\",\n  redirect: \"http://35.246.165.105:9001/authorizationserver/oauth2_implicit_callback\",\n  scope: \"basic\",\n  width: 400, // Width (in pixels) of login popup window. Optional, default: 400\n  height: 400 // Height (in pixels) of login popup window. Optional, default: 400\n}\n\nconst Login2 = ({ isLoggedIn, login, logout }) => {\n  if (isLoggedIn) {\n    return <button type='button' onClick={logout}>Logout</button>\n  } else {\n    return <button type='button' onClick={login}>Login with popup</button>\n  }\n}\n\nLogin2.propTypes = {\n  isLoggedIn: PropTypes.bool.isRequired,\n  login: PropTypes.func.isRequired,\n  logout: PropTypes.func.isRequired\n}\n\nconst mapStateToProps = ({ auth }) => ({\n  isLoggedIn: auth.isLoggedIn\n})\n\nconst mapDispatchToProps = {\n  login: () => login(config),\n  logout\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login2)\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport ProductList from './components/productList';\nimport * as serviceWorker from './serviceWorker';\nimport Cart from './components/cart';\nimport Login from './components/login';\nimport { applyMiddleware, combineReducers, createStore } from 'redux';\nimport { reducer } from './store/reducer';\nimport Login2 from './components/login2';\nimport Logi from './components/login';\nimport { authMiddleware, authReducer as auth } from 'redux-implicit-oauth2'\n\n\n// Create Store with our reducer function.\nconst initialState = {counter: 0 };\nconst store = createStore(reducer,0);\nconst configureStore = (initialState) =>\n  createStore(\n    combineReducers({\n      // other reducers\n      auth\n    }),\n    initialState,\n    applyMiddleware(\n      // other middleware\n      authMiddleware\n    )\n  )\n\nexport default configureStore\n//ReactDOM.render(<Shop />, document.getElementById('root'));\nReactDOM.render(<Cart myStore={store}/>, document.getElementById('cart'));\nReactDOM.render(<Login2 store={configureStore()}/>, document.getElementById('login2'));\nReactDOM.render(<Login />, document.getElementById('login'));\nReactDOM.render(<ProductList myStore={store}/>, document.getElementById('product'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { createStore, combineReducers, applyMiddleware } from 'redux'\nimport { authMiddleware, authReducer as auth } from 'redux-implicit-oauth2'\nexport function reducer(state, action) {\n  if (action.type === 'INCREMENT') {\n    return state + 1;\n  } else if (action.type === 'DECREMENT') {\n    return state - 1;\n  } else {\n    return state;\n  }\n}"],"sourceRoot":""}